For this assignment I designed a service which implements bookshelves for a given set of items inside a bibliography. In order to extend the given bibliography I decided to separate the root path of bookshelves from biblio. Bookshelves should implement paging but it was omitted in the implementation, so the fields "total pages" and "number of page" are always setted to 1. 
In the bookshelves implementation I made the assumption that the items which could been added are just inside the bibliography, so the client doesn't need to send an item which should be searched into the bibliography on server side in order to validate it, but it's enough send a post request with an empty body in which the item id which should be added or removed is specified on the header of the request. The number of items inside a bookshelf is limited to twenty and there are not two bookshelves with the same name, so if an user want to create a bookshelf with a name which is the same of an existing one, the latter is returned without create a duplicate. The resourses that I created in order to handle the bookshelves service are:
- a single bookshelves which collect all the bookshelf element.
- the bookshelf, which collect a maximum of twenty items.
- the reading resource, which is associated to a bookshelf and maintain a counter for the number of readings of the bookshelf.
In order to store the data about bookshelves I created a class called BookshelvesDB.java, which cointains two ConcurrenHashMap and an AtomicInteger. The first map store the Bookshelf as value and their id as key, the second one collect a Reading object for each id of an existing bookshelf and the AtomicInteger is increments at each creation of a bookshelf and it is used in order to create an unique id for each bookshelf and it is never decremented, even if a bookshelf is deleted.
For each request to the service, a status code 200 is returned if the request was a success, or it is returned a status code 201 if a new resource has been created, or 204 in case of delete request. In case of a request on an item or a bookshelf which does not exist on the service, an error code 404 is retrieved. I a client try to ad an item for into a bookshelf, but it has just reached the maximum amount of item that it can store, a status code 403 (Forbidden) is returned to the client.
